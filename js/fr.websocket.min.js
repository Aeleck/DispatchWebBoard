var fr=void 0!==fr?fr:{},debug=void 0!==debug&&debug;fr.ws=fr.config&&fr.user?{socket:null,initComp:!1,initConnection:function(){if(fr.ws.initComp)debug&&console.log("fr.ws.initConnection - init completed already!");else{if(fr.ws.socket=new WebSocket(fr.config.WssURI),!fr.user.isAuthenticated()||!fr.user.hasPermission())return;debug&&console.log("fr.ws.initConnection - WS Connection Starting. DEBUG MODE ACTIVE."),fr.ws.socket.onmessage=fr.ws.onMessage,fr.ws.socket.onerror=fr.ws.onError,fr.ws.socket.onclose=fr.ws.onClose,fr.ws.socket.onopen=fr.ws.onOpen,fr.ws.initComp=!0}},reconnected:!1,clientId:"",onOpen:function(e){fr.user.isAuthenticated()&&fr.user.hasPermission()&&(fr.ws.subscribe("0xDEADBEEF"),fr.ws.reconnected&&(debug&&console.log("fr.ws.onOpen - WS Connected!"),fr.ws.send("rescues:read",{open:"true"},{updateList:"true"}),fr.ws.reconnected=!1))},onClose:function(e){e.wasClean===!1&&(debug&&console.log("fr.ws.onClose - Disconnected from WSocket. Reconnecting..."),fr.ws.initComp=!1,setTimeout(fr.ws.initConnection,6e4),fr.ws.reconnected=!0)},onMessage:function(data){var _data=JSON.parse(data.data);"welcome"===_data.meta.action&&(fr.ws.clientId=_data.meta.id,fr.ws.authenticateWSS()),fr.ws.HandleTPA(_data)},HandleTPA:function(e){},onError:function(e){console.log("=Websocket Module Error="),console.log(e)},send:function(e,n,s){return fr.user.isAuthenticated()?1!==fr.ws.socket.readyState?(0===fr.ws.socket.readyState||2!=fr.ws.socket.readyState&&3!=fr.ws.socket.readyState||(fr.ws.initComp=!1,fr.ws.initConnection()),void setTimeout(function(){fr.ws.send(e,n,s)},1e3)):(debug&&console.log("fr.ws.send - Sending TPA"),void fr.ws.socket.send(JSON.stringify({action:e,applicationId:fr.ws.clientId,data:n,meta:s}))):void(debug&&console.log("fr.ws.send - Sending failed, Not Authenticated"))},authenticateWSS:function(){if(!fr.user.isAuthenticated()||!fr.user.hasPermission())return void(debug&&console.log("fr.ws.authenticateWSS - Subscribing failed, Not API Authenticated"));fr.ws.socket.send(JSON.stringify({action:"authorization",applicationId:fr.ws.clientId,bearer:fr.user.AuthHeader,data:{},meta:{}}))},subscribe:function(e){if(!fr.user.isAuthenticated()||!fr.user.hasPermission())return void(debug&&console.log("fr.ws.subscribe - Subscribing failed, Not Authenticated"));debug&&console.log("fr.ws.subscribe - Subscirbing to stream!"),fr.ws.socket.send(JSON.stringify({action:"stream:subscribe",applicationId:e}))},searchNickName:function(e,n){return fr.user.isAuthenticated()&&fr.user.hasPermission()?1!=fr.ws.socket.readyState?(0===fr.ws.socket.readyState||2!=fr.ws.socket.readyState&&3!=fr.ws.socket.readyState||(fr.ws.initComp=!1,fr.ws.initConnection()),void setTimeout(function(){fr.ws.searchNickName(e,n)},1e3)):(debug&&console.log("fr.ws.searchNickName - Searching for nick: "+e),void fr.ws.socket.send(JSON.stringify({action:"nicknames:search",applicationId:fr.ws.clientId,nickname:e,meta:n}))):void(debug&&console.log("fr.ws.searchNickName - Search failed, Not Authenticated"))}}:null;