fr.ws=fr.config&&fr.user?{socket:null,clientId:"",reconnected:!1,initComp:!1,openRequests:{},initConnection:function(){this.initComp?window.console.debug("fr.ws.initConnection - init completed already!"):(this.socket=new WebSocket(fr.config.WssURI),fr.user.hasPermission()?(window.console.debug("fr.ws.initConnection - WS Connection Starting. DEBUG MODE ACTIVE."),this.socket.onmessage=(e=>{fr.ws.onMessage(e)}),this.socket.onerror=(e=>{fr.ws.onError(e)}),this.socket.onclose=(e=>{fr.ws.onClose(e)}),this.socket.onopen=(()=>{fr.ws.onOpen()}),this.initComp=!0):window.console.debug("fr.ws.initConnection - User lacks permission to run the board. Ditching setup."))},onMessage:function(e){let n=JSON.parse(e.data);if("welcome"===n.meta.action&&(this.clientId=n.meta.id,this.authenticateWSS(),this.subscribe("0xDEADBEEF")),"string"==typeof n.meta.dwbRequestUID&&this.openRequests.hasOwnProperty(n.meta.dwbRequestUID))return this.openRequests[n.meta.dwbRequestUID](n),void delete this.openRequests[n.meta.dwbRequestUID];this.onTPA(n)},onError:function(e){window.console.log("=Websocket Module Error="),window.console.log(e)},onOpen:function(){fr.user.hasPermission()&&this.reconnected&&(window.console.debug("fr.ws.onOpen - WS Reconnected!"),this.onReconnect(),this.reconnected=!1)},onClose:function(e){!1===e.wasClean&&(window.console.debug("fr.ws.onClose - Disconnected from WSocket. Reconnecting..."),this.initComp=!1,setTimeout(this.initConnection,1e4),this.reconnected=!0)},onTPA:function(){},onReconnect:function(){},sendJson:function(e){if(fr.user.isAuthenticated())return 1!==this.socket.readyState?(this.socket.readyState>1&&(this.initComp=!1,this.initConnection()),void setTimeout(()=>{this.sendJson(e)},1e3)):void this.socket.send(JSON.stringify(e));window.console.debug("fr.ws.send - Sending failed, Not Authenticated")},sendJsonRequest:function(e){e.hasOwnProperty("meta")&&"object"==typeof e.meta||(e.meta={});let n=makeID(48);return e.meta.dwbRequestUID=n,new Promise((t,o)=>{this.sendJson(e);this.openRequests[n]=(e=>{t(e)});setTimeout(()=>{o({errors:[{code:408,detail:"Server produced no response.",status:"Request Timeout",title:"Request Timeout"}],meta:e.meta})},6e4)})},send:function(e,n,t){this.sendJson({action:e,applicationId:this.clientId,data:n||{},meta:t||{}})},sendRequest:function(e,n,t){return this.sendJsonRequest({action:e,applicationId:this.clientId,data:n||{},meta:t||{}})},authenticateWSS:function(){fr.user.hasPermission()?this.sendJson({action:"authorization",applicationId:this.clientId,bearer:fr.user.AuthHeader,data:{},meta:{}}):window.console.debug("fr.ws.authenticateWSS - Authentication failed, Not API Authenticated")},subscribe:function(e){fr.user.hasPermission()?(window.console.debug("fr.ws.subscribe - Subscirbing to stream!"),this.sendJson({action:"stream:subscribe",applicationId:e,data:{},meta:{}})):window.console.debug("fr.ws.subscribe - Subscribing failed, Not Authenticated")},searchNickName:function(e,n){fr.user.hasPermission()?(window.console.debug("fr.ws.searchNickName - Searching for nick: "+e),this.sendJson({action:"nicknames:search",applicationId:this.clientId,nickname:e,data:{},meta:n||{}})):window.console.debug("fr.ws.searchNickName - Search failed, Not Authenticated")}}:null;